/*
Copyright 2017 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Modifications:

- 2019, @john.koepi/@sitano extract pool
*/

package gcopool

import (
	"sync"
)

// Handle is an interface for transactions to access sessions safely. It is generated by Pool.Take().
type Handle struct {
	// mu guarantees that the inner session object is returned / destroyed only once.
	mu sync.Mutex
	// session is a pointer to a session object. Transactions never need to access it directly.
	s *session
}

// Recycle gives the inner session object back to its home session pool. It is safe to call Recycle multiple times but only the first one would take effect.
func (h *Handle) Recycle() {
	h.mu.Lock()
	defer h.mu.Unlock()
	if h.s == nil {
		// Handle has already been recycled.
		return
	}
	h.s.recycle()
	h.s = nil
}

// GetID gets the session ID from the internal session object.
// GetID returns empty string if the Handle is nil or the inner session
// object has been released by Recycle / Destroy.
func (h *Handle) GetID() string {
	h.mu.Lock()
	defer h.mu.Unlock()
	if h.s == nil {
		// Handle has already been recycled/destroyed.
		return ""
	}
	return h.s.getID()
}

// GetResource gets the resource associated with the session ID in Handle.
func (h *Handle) GetResource() Resource {
	h.mu.Lock()
	defer h.mu.Unlock()
	if h.s == nil {
		return nil
	}
	return h.s.res
}

// GetTransactionID returns the transaction id in the session if available.
func (h *Handle) GetTransactionID() TXID {
	h.mu.Lock()
	defer h.mu.Unlock()
	if h.s == nil {
		var def TXID
		return def
	}
	return h.s.tx
}

// Destroy destroys the inner session object. It is safe to call Destroy multiple times and only the first call would attempt to
// Destroy the inner session object.
func (h *Handle) Destroy() {
	h.mu.Lock()
	s := h.s
	h.s = nil
	h.mu.Unlock()
	if s == nil {
		// Handle has already been destroyed.
		return
	}
	s.destroy(false)
}

func (h *Handle) session() *session {
	h.mu.Lock()
	s := h.s
	h.mu.Unlock()
	return s
}
